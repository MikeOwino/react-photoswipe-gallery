{"version":3,"file":"main.e202d41a.iframe.bundle.js","mappings":"AAKA","sources":["webpack://react-photoswipe-gallery/./.storybook/generated-stories-entry.js","webpack://react-photoswipe-gallery/./src/index.stories.tsx","webpack://react-photoswipe-gallery/./src/context.ts","webpack://react-photoswipe-gallery/./src/gallery-base.ts","webpack://react-photoswipe-gallery/./src/gallery-custom.tsx","webpack://react-photoswipe-gallery/./src/gallery-default.tsx","webpack://react-photoswipe-gallery/./src/helpers.ts","webpack://react-photoswipe-gallery/./src/hooks.ts","webpack://react-photoswipe-gallery/./src/index.ts","webpack://react-photoswipe-gallery/./src/item.ts","webpack://react-photoswipe-gallery/./src/no-ref-error.ts","webpack://react-photoswipe-gallery/./src/photoswipe-layout.tsx","webpack://react-photoswipe-gallery/\\.)("],"sourcesContent":["\"use strict\";\n\nvar _frameworkImportPath = require(\"@storybook/react\");\n\n/* eslint-disable import/no-unresolved */\n(0, _frameworkImportPath.configure)([require.context('../src', true, /^\\.(?:(?:^|\\/|(?:(?:(?!(?:^|\\/)\\.).)*?)\\/)(?!\\.)(?=.)[^/]*?\\.stories\\.(ts|tsx))$/)], module, false);","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React, { useState, useRef, FC } from 'react'\\nimport PhotoswipeUIDefault from 'photoswipe/dist/photoswipe-ui-default'\\nimport { withKnobs, button, number } from '@storybook/addon-knobs'\\nimport { shuffle } from './helpers'\\nimport { InternalItem } from './types'\\nimport { Gallery, CustomGallery, Item, DefaultLayout, useGallery } from '.'\\nimport 'photoswipe/dist/photoswipe.css'\\nimport 'photoswipe/dist/default-skin/default-skin.css'\\n\\nexport default { title: 'Gallery', decorators: [withKnobs] }\\n\\nconst createItem = (index: number): InternalItem => ({\\n  original: `https://placekitten.com/1024/768?image=${index}`,\\n  thumbnail: `https://placekitten.com/160/120?image=${index}`,\\n  width: 1024,\\n  height: 768,\\n  title: `kitty #${index}`,\\n})\\n\\nconst items = Array.from({ length: 3 }, (_, i) => createItem(i + 1))\\n\\nconst ImageItem: FC<InternalItem> = ({\\n  original,\\n  thumbnail,\\n  width,\\n  height,\\n  title,\\n  id,\\n}) => {\\n  const [fullTitle, setFullTitle] = useState(title)\\n  return (\\n    <Item\\n      original={original}\\n      thumbnail={thumbnail}\\n      width={width}\\n      height={height}\\n      title={fullTitle}\\n      id={id}\\n    >\\n      {({ ref, open }) => (\\n        <div style={{ display: 'inline-block', margin: 5 }}>\\n          <img\\n            onClick={open}\\n            src={thumbnail}\\n            ref={ref as React.MutableRefObject<HTMLImageElement>}\\n            style={{ display: 'block', cursor: 'pointer', marginBottom: 5 }}\\n          />\\n          <input\\n            type=\\\"text\\\"\\n            value={fullTitle}\\n            onChange={(e) => setFullTitle(e.target.value)}\\n            style={{ width: '100%', boxSizing: 'border-box' }}\\n          />\\n        </div>\\n      )}\\n    </Item>\\n  )\\n}\\n\\nexport const simple = () => {\\n  const smallItemStyles: React.CSSProperties = {\\n    cursor: 'pointer',\\n    objectFit: 'cover',\\n    width: '100%',\\n    maxHeight: '100%',\\n  }\\n  return (\\n    <Gallery id=\\\"simple-gallery\\\">\\n      <div\\n        style={{\\n          display: 'grid',\\n          gridTemplateColumns: '240px 171px 171px',\\n          gridTemplateRows: '114px 114px',\\n          gridGap: 12,\\n        }}\\n      >\\n        <Item\\n          original=\\\"https://farm4.staticflickr.com/3894/15008518202_c265dfa55f_h.jpg\\\"\\n          thumbnail=\\\"https://farm4.staticflickr.com/3894/15008518202_b016d7d289_m.jpg\\\"\\n          width=\\\"1600\\\"\\n          height=\\\"1600\\\"\\n          title=\\\"Author: Folkert Gorter\\\"\\n          id=\\\"so-first\\\"\\n        >\\n          {({ ref, open }) => (\\n            <img\\n              style={{ cursor: 'pointer' }}\\n              src=\\\"https://farm4.staticflickr.com/3894/15008518202_b016d7d289_m.jpg\\\"\\n              ref={ref as React.MutableRefObject<HTMLImageElement>}\\n              onClick={open}\\n            />\\n          )}\\n        </Item>\\n        <Item\\n          original=\\\"https://farm6.staticflickr.com/5591/15008867125_b61960af01_h.jpg\\\"\\n          thumbnail=\\\"https://farm6.staticflickr.com/5591/15008867125_68a8ed88cc_m.jpg\\\"\\n          width=\\\"1600\\\"\\n          height=\\\"1068\\\"\\n          title=\\\"Author: Samuel Rohl\\\"\\n        >\\n          {({ ref, open }) => (\\n            <img\\n              style={smallItemStyles}\\n              src=\\\"https://farm6.staticflickr.com/5591/15008867125_68a8ed88cc_m.jpg\\\"\\n              ref={ref as React.MutableRefObject<HTMLImageElement>}\\n              onClick={open}\\n            />\\n          )}\\n        </Item>\\n        <Item\\n          original=\\\"https://farm4.staticflickr.com/3902/14985871946_86abb8c56f_b.jpg\\\"\\n          thumbnail=\\\"https://farm4.staticflickr.com/3902/14985871946_86abb8c56f_m.jpg\\\"\\n          width=\\\"1600\\\"\\n          height=\\\"1066\\\"\\n          title=\\\"Author: Ales Krivec\\\"\\n        >\\n          {({ ref, open }) => (\\n            <img\\n              style={smallItemStyles}\\n              src=\\\"https://farm4.staticflickr.com/3902/14985871946_86abb8c56f_m.jpg\\\"\\n              ref={ref as React.MutableRefObject<HTMLImageElement>}\\n              onClick={open}\\n            />\\n          )}\\n        </Item>\\n        <Item\\n          original=\\\"https://farm6.staticflickr.com/5584/14985868676_b51baa4071_h.jpg\\\"\\n          thumbnail=\\\"https://farm6.staticflickr.com/5584/14985868676_4b802b932a_m.jpg\\\"\\n          width=\\\"1600\\\"\\n          height=\\\"1066\\\"\\n          title=\\\"Author: Michael Hull\\\"\\n        >\\n          {({ ref, open }) => (\\n            <img\\n              style={{ ...smallItemStyles, gridColumnStart: 2 }}\\n              src=\\\"https://farm6.staticflickr.com/5584/14985868676_4b802b932a_m.jpg\\\"\\n              ref={ref as React.MutableRefObject<HTMLImageElement>}\\n              onClick={open}\\n            />\\n          )}\\n        </Item>\\n        <Item\\n          original=\\\"https://farm4.staticflickr.com/3920/15008465772_d50c8f0531_h.jpg\\\"\\n          thumbnail=\\\"https://farm4.staticflickr.com/3920/15008465772_383e697089_m.jpg\\\"\\n          width=\\\"1600\\\"\\n          height=\\\"1066\\\"\\n          title=\\\"Author: Thomas Lefebvre\\\"\\n        >\\n          {({ ref, open }) => (\\n            <img\\n              style={smallItemStyles}\\n              src=\\\"https://farm4.staticflickr.com/3920/15008465772_383e697089_m.jpg\\\"\\n              ref={ref as React.MutableRefObject<HTMLImageElement>}\\n              onClick={open}\\n            />\\n          )}\\n        </Item>\\n      </div>\\n    </Gallery>\\n  )\\n}\\n\\nconst Kittens = () => {\\n  const [photos, setPhotos] = useState(items)\\n  button('add', () => setPhotos([createItem(photos.length + 1), ...photos]))\\n  button('remove', () => setPhotos(photos.slice(1)))\\n  button('swap first two', () =>\\n    setPhotos([photos[1], photos[0], ...photos.slice(2)]),\\n  )\\n  button('swap last two', () =>\\n    setPhotos([\\n      ...photos.slice(0, photos.length - 2),\\n      photos[photos.length - 1],\\n      photos[photos.length - 2],\\n    ]),\\n  )\\n  button('shuffle', () => setPhotos([...shuffle(photos)]))\\n  const currentItem = number('current item', 0)\\n  const { open } = useGallery()\\n\\n  return (\\n    <>\\n      {photos.map((props) => (\\n        <ImageItem {...props} key={props.original} />\\n      ))}\\n      <div>\\n        <button type=\\\"button\\\" onClick={() => open(currentItem)}>\\n          {`Show kitty #${currentItem + 1}`}\\n        </button>\\n      </div>\\n    </>\\n  )\\n}\\n\\nexport const playground = () => {\\n  return (\\n    <Gallery>\\n      <Kittens />\\n    </Gallery>\\n  )\\n}\\n\\nexport const sharedLayout = () => {\\n  const layoutRef = useRef()\\n  return (\\n    <>\\n      <h1>First Gallery</h1>\\n      <CustomGallery ui={PhotoswipeUIDefault} layoutRef={layoutRef} id=\\\"first\\\">\\n        {shuffle(items).map((props, i) => (\\n          <ImageItem {...props} key={props.original} id={i} />\\n        ))}\\n      </CustomGallery>\\n      <h1>Second Gallery</h1>\\n      <CustomGallery ui={PhotoswipeUIDefault} layoutRef={layoutRef} id={2}>\\n        {shuffle(items).map((props, i) => (\\n          <ImageItem {...props} key={props.original} id={`kitten-${i}`} />\\n        ))}\\n      </CustomGallery>\\n      <DefaultLayout\\n        shareButton={false}\\n        fullscreenButton={false}\\n        zoomButton={false}\\n        ref={layoutRef}\\n      />\\n    </>\\n  )\\n}\\n\\nexport const withoutImages = () => {\\n  const [links, setLinks] = useState(items)\\n  button('add', () => setLinks([createItem(links.length + 1), ...links]))\\n  button('remove', () => setLinks(links.slice(1)))\\n  button('swap first two', () =>\\n    setLinks([links[1], links[0], ...links.slice(2)]),\\n  )\\n  button('swap last two', () =>\\n    setLinks([\\n      ...links.slice(0, links.length - 2),\\n      links[links.length - 1],\\n      links[links.length - 2],\\n    ]),\\n  )\\n  button('shuffle', () => setLinks([...shuffle(links)]))\\n  return (\\n    <Gallery options={{ getThumbBoundsFn: undefined, showHideOpacity: true }}>\\n      <ul>\\n        {links.map((props) => (\\n          <Item {...props} key={props.original}>\\n            {({ ref, open }) => (\\n              <li ref={ref as React.MutableRefObject<HTMLLIElement>}>\\n                <a\\n                  href=\\\"#\\\"\\n                  onClick={(e) => {\\n                    e.preventDefault()\\n                    open()\\n                  }}\\n                >\\n                  {props.title}\\n                </a>\\n              </li>\\n            )}\\n          </Item>\\n        ))}\\n      </ul>\\n    </Gallery>\\n  )\\n}\\n\\nexport const withHtml = () => {\\n  const html = `\\n  <div style=\\\"\\n    color: white;\\n    display: flex;\\n    place-content: center;\\n    flex-direction: column;\\n    height: 100%;\\n    text-align: center;\\n  \\\">\\n    <h1>😿</h1>\\n    There are no kittens :(\\n  </div>\\n  `\\n  return (\\n    <Gallery options={{ getThumbBoundsFn: undefined, showHideOpacity: true }}>\\n      <Item html={html}>\\n        {({ open }) => (\\n          <a\\n            href=\\\"#\\\"\\n            onClick={(e) => {\\n              e.preventDefault()\\n              open()\\n            }}\\n          >\\n            Open\\n          </a>\\n        )}\\n      </Item>\\n    </Gallery>\\n  )\\n}\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"simple\":{\"startLoc\":{\"col\":22,\"line\":60},\"endLoc\":{\"col\":1,\"line\":161},\"startBody\":{\"col\":22,\"line\":60},\"endBody\":{\"col\":1,\"line\":161}},\"playground\":{\"startLoc\":{\"col\":26,\"line\":195},\"endLoc\":{\"col\":1,\"line\":201},\"startBody\":{\"col\":26,\"line\":195},\"endBody\":{\"col\":1,\"line\":201}},\"sharedLayout\":{\"startLoc\":{\"col\":28,\"line\":203},\"endLoc\":{\"col\":1,\"line\":227},\"startBody\":{\"col\":28,\"line\":203},\"endBody\":{\"col\":1,\"line\":227}},\"withoutImages\":{\"startLoc\":{\"col\":29,\"line\":229},\"endLoc\":{\"col\":1,\"line\":267},\"startBody\":{\"col\":29,\"line\":229},\"endBody\":{\"col\":1,\"line\":267}},\"withHtml\":{\"startLoc\":{\"col\":24,\"line\":269},\"endLoc\":{\"col\":1,\"line\":300},\"startBody\":{\"col\":24,\"line\":269},\"endBody\":{\"col\":1,\"line\":300}}};\n    \nimport React, { useState, useRef, FC } from 'react'\nimport PhotoswipeUIDefault from 'photoswipe/dist/photoswipe-ui-default'\nimport { withKnobs, button, number } from '@storybook/addon-knobs'\nimport { shuffle } from './helpers'\nimport { InternalItem } from './types'\nimport { Gallery, CustomGallery, Item, DefaultLayout, useGallery } from '.'\nimport 'photoswipe/dist/photoswipe.css'\nimport 'photoswipe/dist/default-skin/default-skin.css'\n\nexport default {parameters: {\"storySource\":{\"source\":\"import React, { useState, useRef, FC } from 'react'\\nimport PhotoswipeUIDefault from 'photoswipe/dist/photoswipe-ui-default'\\nimport { withKnobs, button, number } from '@storybook/addon-knobs'\\nimport { shuffle } from './helpers'\\nimport { InternalItem } from './types'\\nimport { Gallery, CustomGallery, Item, DefaultLayout, useGallery } from '.'\\nimport 'photoswipe/dist/photoswipe.css'\\nimport 'photoswipe/dist/default-skin/default-skin.css'\\n\\nexport default { title: 'Gallery', decorators: [withKnobs] }\\n\\nconst createItem = (index: number): InternalItem => ({\\n  original: `https://placekitten.com/1024/768?image=${index}`,\\n  thumbnail: `https://placekitten.com/160/120?image=${index}`,\\n  width: 1024,\\n  height: 768,\\n  title: `kitty #${index}`,\\n})\\n\\nconst items = Array.from({ length: 3 }, (_, i) => createItem(i + 1))\\n\\nconst ImageItem: FC<InternalItem> = ({\\n  original,\\n  thumbnail,\\n  width,\\n  height,\\n  title,\\n  id,\\n}) => {\\n  const [fullTitle, setFullTitle] = useState(title)\\n  return (\\n    <Item\\n      original={original}\\n      thumbnail={thumbnail}\\n      width={width}\\n      height={height}\\n      title={fullTitle}\\n      id={id}\\n    >\\n      {({ ref, open }) => (\\n        <div style={{ display: 'inline-block', margin: 5 }}>\\n          <img\\n            onClick={open}\\n            src={thumbnail}\\n            ref={ref as React.MutableRefObject<HTMLImageElement>}\\n            style={{ display: 'block', cursor: 'pointer', marginBottom: 5 }}\\n          />\\n          <input\\n            type=\\\"text\\\"\\n            value={fullTitle}\\n            onChange={(e) => setFullTitle(e.target.value)}\\n            style={{ width: '100%', boxSizing: 'border-box' }}\\n          />\\n        </div>\\n      )}\\n    </Item>\\n  )\\n}\\n\\nexport const simple = () => {\\n  const smallItemStyles: React.CSSProperties = {\\n    cursor: 'pointer',\\n    objectFit: 'cover',\\n    width: '100%',\\n    maxHeight: '100%',\\n  }\\n  return (\\n    <Gallery id=\\\"simple-gallery\\\">\\n      <div\\n        style={{\\n          display: 'grid',\\n          gridTemplateColumns: '240px 171px 171px',\\n          gridTemplateRows: '114px 114px',\\n          gridGap: 12,\\n        }}\\n      >\\n        <Item\\n          original=\\\"https://farm4.staticflickr.com/3894/15008518202_c265dfa55f_h.jpg\\\"\\n          thumbnail=\\\"https://farm4.staticflickr.com/3894/15008518202_b016d7d289_m.jpg\\\"\\n          width=\\\"1600\\\"\\n          height=\\\"1600\\\"\\n          title=\\\"Author: Folkert Gorter\\\"\\n          id=\\\"so-first\\\"\\n        >\\n          {({ ref, open }) => (\\n            <img\\n              style={{ cursor: 'pointer' }}\\n              src=\\\"https://farm4.staticflickr.com/3894/15008518202_b016d7d289_m.jpg\\\"\\n              ref={ref as React.MutableRefObject<HTMLImageElement>}\\n              onClick={open}\\n            />\\n          )}\\n        </Item>\\n        <Item\\n          original=\\\"https://farm6.staticflickr.com/5591/15008867125_b61960af01_h.jpg\\\"\\n          thumbnail=\\\"https://farm6.staticflickr.com/5591/15008867125_68a8ed88cc_m.jpg\\\"\\n          width=\\\"1600\\\"\\n          height=\\\"1068\\\"\\n          title=\\\"Author: Samuel Rohl\\\"\\n        >\\n          {({ ref, open }) => (\\n            <img\\n              style={smallItemStyles}\\n              src=\\\"https://farm6.staticflickr.com/5591/15008867125_68a8ed88cc_m.jpg\\\"\\n              ref={ref as React.MutableRefObject<HTMLImageElement>}\\n              onClick={open}\\n            />\\n          )}\\n        </Item>\\n        <Item\\n          original=\\\"https://farm4.staticflickr.com/3902/14985871946_86abb8c56f_b.jpg\\\"\\n          thumbnail=\\\"https://farm4.staticflickr.com/3902/14985871946_86abb8c56f_m.jpg\\\"\\n          width=\\\"1600\\\"\\n          height=\\\"1066\\\"\\n          title=\\\"Author: Ales Krivec\\\"\\n        >\\n          {({ ref, open }) => (\\n            <img\\n              style={smallItemStyles}\\n              src=\\\"https://farm4.staticflickr.com/3902/14985871946_86abb8c56f_m.jpg\\\"\\n              ref={ref as React.MutableRefObject<HTMLImageElement>}\\n              onClick={open}\\n            />\\n          )}\\n        </Item>\\n        <Item\\n          original=\\\"https://farm6.staticflickr.com/5584/14985868676_b51baa4071_h.jpg\\\"\\n          thumbnail=\\\"https://farm6.staticflickr.com/5584/14985868676_4b802b932a_m.jpg\\\"\\n          width=\\\"1600\\\"\\n          height=\\\"1066\\\"\\n          title=\\\"Author: Michael Hull\\\"\\n        >\\n          {({ ref, open }) => (\\n            <img\\n              style={{ ...smallItemStyles, gridColumnStart: 2 }}\\n              src=\\\"https://farm6.staticflickr.com/5584/14985868676_4b802b932a_m.jpg\\\"\\n              ref={ref as React.MutableRefObject<HTMLImageElement>}\\n              onClick={open}\\n            />\\n          )}\\n        </Item>\\n        <Item\\n          original=\\\"https://farm4.staticflickr.com/3920/15008465772_d50c8f0531_h.jpg\\\"\\n          thumbnail=\\\"https://farm4.staticflickr.com/3920/15008465772_383e697089_m.jpg\\\"\\n          width=\\\"1600\\\"\\n          height=\\\"1066\\\"\\n          title=\\\"Author: Thomas Lefebvre\\\"\\n        >\\n          {({ ref, open }) => (\\n            <img\\n              style={smallItemStyles}\\n              src=\\\"https://farm4.staticflickr.com/3920/15008465772_383e697089_m.jpg\\\"\\n              ref={ref as React.MutableRefObject<HTMLImageElement>}\\n              onClick={open}\\n            />\\n          )}\\n        </Item>\\n      </div>\\n    </Gallery>\\n  )\\n}\\n\\nconst Kittens = () => {\\n  const [photos, setPhotos] = useState(items)\\n  button('add', () => setPhotos([createItem(photos.length + 1), ...photos]))\\n  button('remove', () => setPhotos(photos.slice(1)))\\n  button('swap first two', () =>\\n    setPhotos([photos[1], photos[0], ...photos.slice(2)]),\\n  )\\n  button('swap last two', () =>\\n    setPhotos([\\n      ...photos.slice(0, photos.length - 2),\\n      photos[photos.length - 1],\\n      photos[photos.length - 2],\\n    ]),\\n  )\\n  button('shuffle', () => setPhotos([...shuffle(photos)]))\\n  const currentItem = number('current item', 0)\\n  const { open } = useGallery()\\n\\n  return (\\n    <>\\n      {photos.map((props) => (\\n        <ImageItem {...props} key={props.original} />\\n      ))}\\n      <div>\\n        <button type=\\\"button\\\" onClick={() => open(currentItem)}>\\n          {`Show kitty #${currentItem + 1}`}\\n        </button>\\n      </div>\\n    </>\\n  )\\n}\\n\\nexport const playground = () => {\\n  return (\\n    <Gallery>\\n      <Kittens />\\n    </Gallery>\\n  )\\n}\\n\\nexport const sharedLayout = () => {\\n  const layoutRef = useRef()\\n  return (\\n    <>\\n      <h1>First Gallery</h1>\\n      <CustomGallery ui={PhotoswipeUIDefault} layoutRef={layoutRef} id=\\\"first\\\">\\n        {shuffle(items).map((props, i) => (\\n          <ImageItem {...props} key={props.original} id={i} />\\n        ))}\\n      </CustomGallery>\\n      <h1>Second Gallery</h1>\\n      <CustomGallery ui={PhotoswipeUIDefault} layoutRef={layoutRef} id={2}>\\n        {shuffle(items).map((props, i) => (\\n          <ImageItem {...props} key={props.original} id={`kitten-${i}`} />\\n        ))}\\n      </CustomGallery>\\n      <DefaultLayout\\n        shareButton={false}\\n        fullscreenButton={false}\\n        zoomButton={false}\\n        ref={layoutRef}\\n      />\\n    </>\\n  )\\n}\\n\\nexport const withoutImages = () => {\\n  const [links, setLinks] = useState(items)\\n  button('add', () => setLinks([createItem(links.length + 1), ...links]))\\n  button('remove', () => setLinks(links.slice(1)))\\n  button('swap first two', () =>\\n    setLinks([links[1], links[0], ...links.slice(2)]),\\n  )\\n  button('swap last two', () =>\\n    setLinks([\\n      ...links.slice(0, links.length - 2),\\n      links[links.length - 1],\\n      links[links.length - 2],\\n    ]),\\n  )\\n  button('shuffle', () => setLinks([...shuffle(links)]))\\n  return (\\n    <Gallery options={{ getThumbBoundsFn: undefined, showHideOpacity: true }}>\\n      <ul>\\n        {links.map((props) => (\\n          <Item {...props} key={props.original}>\\n            {({ ref, open }) => (\\n              <li ref={ref as React.MutableRefObject<HTMLLIElement>}>\\n                <a\\n                  href=\\\"#\\\"\\n                  onClick={(e) => {\\n                    e.preventDefault()\\n                    open()\\n                  }}\\n                >\\n                  {props.title}\\n                </a>\\n              </li>\\n            )}\\n          </Item>\\n        ))}\\n      </ul>\\n    </Gallery>\\n  )\\n}\\n\\nexport const withHtml = () => {\\n  const html = `\\n  <div style=\\\"\\n    color: white;\\n    display: flex;\\n    place-content: center;\\n    flex-direction: column;\\n    height: 100%;\\n    text-align: center;\\n  \\\">\\n    <h1>😿</h1>\\n    There are no kittens :(\\n  </div>\\n  `\\n  return (\\n    <Gallery options={{ getThumbBoundsFn: undefined, showHideOpacity: true }}>\\n      <Item html={html}>\\n        {({ open }) => (\\n          <a\\n            href=\\\"#\\\"\\n            onClick={(e) => {\\n              e.preventDefault()\\n              open()\\n            }}\\n          >\\n            Open\\n          </a>\\n        )}\\n      </Item>\\n    </Gallery>\\n  )\\n}\\n\",\"locationsMap\":{\"simple\":{\"startLoc\":{\"col\":22,\"line\":60},\"endLoc\":{\"col\":1,\"line\":161},\"startBody\":{\"col\":22,\"line\":60},\"endBody\":{\"col\":1,\"line\":161}},\"playground\":{\"startLoc\":{\"col\":26,\"line\":195},\"endLoc\":{\"col\":1,\"line\":201},\"startBody\":{\"col\":26,\"line\":195},\"endBody\":{\"col\":1,\"line\":201}},\"shared-layout\":{\"startLoc\":{\"col\":28,\"line\":203},\"endLoc\":{\"col\":1,\"line\":227},\"startBody\":{\"col\":28,\"line\":203},\"endBody\":{\"col\":1,\"line\":227}},\"without-images\":{\"startLoc\":{\"col\":29,\"line\":229},\"endLoc\":{\"col\":1,\"line\":267},\"startBody\":{\"col\":29,\"line\":229},\"endBody\":{\"col\":1,\"line\":267}},\"with-html\":{\"startLoc\":{\"col\":24,\"line\":269},\"endLoc\":{\"col\":1,\"line\":300},\"startBody\":{\"col\":24,\"line\":269},\"endBody\":{\"col\":1,\"line\":300}}}},}, title: 'Gallery', decorators: [withKnobs] }\n\nconst createItem = (index: number): InternalItem => ({\n  original: `https://placekitten.com/1024/768?image=${index}`,\n  thumbnail: `https://placekitten.com/160/120?image=${index}`,\n  width: 1024,\n  height: 768,\n  title: `kitty #${index}`,\n})\n\nconst items = Array.from({ length: 3 }, (_, i) => createItem(i + 1))\n\nconst ImageItem: FC<InternalItem> = ({\n  original,\n  thumbnail,\n  width,\n  height,\n  title,\n  id,\n}) => {\n  const [fullTitle, setFullTitle] = useState(title)\n  return (\n    <Item\n      original={original}\n      thumbnail={thumbnail}\n      width={width}\n      height={height}\n      title={fullTitle}\n      id={id}\n    >\n      {({ ref, open }) => (\n        <div style={{ display: 'inline-block', margin: 5 }}>\n          <img\n            onClick={open}\n            src={thumbnail}\n            ref={ref as React.MutableRefObject<HTMLImageElement>}\n            style={{ display: 'block', cursor: 'pointer', marginBottom: 5 }}\n          />\n          <input\n            type=\"text\"\n            value={fullTitle}\n            onChange={(e) => setFullTitle(e.target.value)}\n            style={{ width: '100%', boxSizing: 'border-box' }}\n          />\n        </div>\n      )}\n    </Item>\n  )\n}\n\nexport const simple = () => {\n  const smallItemStyles: React.CSSProperties = {\n    cursor: 'pointer',\n    objectFit: 'cover',\n    width: '100%',\n    maxHeight: '100%',\n  }\n  return (\n    <Gallery id=\"simple-gallery\">\n      <div\n        style={{\n          display: 'grid',\n          gridTemplateColumns: '240px 171px 171px',\n          gridTemplateRows: '114px 114px',\n          gridGap: 12,\n        }}\n      >\n        <Item\n          original=\"https://farm4.staticflickr.com/3894/15008518202_c265dfa55f_h.jpg\"\n          thumbnail=\"https://farm4.staticflickr.com/3894/15008518202_b016d7d289_m.jpg\"\n          width=\"1600\"\n          height=\"1600\"\n          title=\"Author: Folkert Gorter\"\n          id=\"so-first\"\n        >\n          {({ ref, open }) => (\n            <img\n              style={{ cursor: 'pointer' }}\n              src=\"https://farm4.staticflickr.com/3894/15008518202_b016d7d289_m.jpg\"\n              ref={ref as React.MutableRefObject<HTMLImageElement>}\n              onClick={open}\n            />\n          )}\n        </Item>\n        <Item\n          original=\"https://farm6.staticflickr.com/5591/15008867125_b61960af01_h.jpg\"\n          thumbnail=\"https://farm6.staticflickr.com/5591/15008867125_68a8ed88cc_m.jpg\"\n          width=\"1600\"\n          height=\"1068\"\n          title=\"Author: Samuel Rohl\"\n        >\n          {({ ref, open }) => (\n            <img\n              style={smallItemStyles}\n              src=\"https://farm6.staticflickr.com/5591/15008867125_68a8ed88cc_m.jpg\"\n              ref={ref as React.MutableRefObject<HTMLImageElement>}\n              onClick={open}\n            />\n          )}\n        </Item>\n        <Item\n          original=\"https://farm4.staticflickr.com/3902/14985871946_86abb8c56f_b.jpg\"\n          thumbnail=\"https://farm4.staticflickr.com/3902/14985871946_86abb8c56f_m.jpg\"\n          width=\"1600\"\n          height=\"1066\"\n          title=\"Author: Ales Krivec\"\n        >\n          {({ ref, open }) => (\n            <img\n              style={smallItemStyles}\n              src=\"https://farm4.staticflickr.com/3902/14985871946_86abb8c56f_m.jpg\"\n              ref={ref as React.MutableRefObject<HTMLImageElement>}\n              onClick={open}\n            />\n          )}\n        </Item>\n        <Item\n          original=\"https://farm6.staticflickr.com/5584/14985868676_b51baa4071_h.jpg\"\n          thumbnail=\"https://farm6.staticflickr.com/5584/14985868676_4b802b932a_m.jpg\"\n          width=\"1600\"\n          height=\"1066\"\n          title=\"Author: Michael Hull\"\n        >\n          {({ ref, open }) => (\n            <img\n              style={{ ...smallItemStyles, gridColumnStart: 2 }}\n              src=\"https://farm6.staticflickr.com/5584/14985868676_4b802b932a_m.jpg\"\n              ref={ref as React.MutableRefObject<HTMLImageElement>}\n              onClick={open}\n            />\n          )}\n        </Item>\n        <Item\n          original=\"https://farm4.staticflickr.com/3920/15008465772_d50c8f0531_h.jpg\"\n          thumbnail=\"https://farm4.staticflickr.com/3920/15008465772_383e697089_m.jpg\"\n          width=\"1600\"\n          height=\"1066\"\n          title=\"Author: Thomas Lefebvre\"\n        >\n          {({ ref, open }) => (\n            <img\n              style={smallItemStyles}\n              src=\"https://farm4.staticflickr.com/3920/15008465772_383e697089_m.jpg\"\n              ref={ref as React.MutableRefObject<HTMLImageElement>}\n              onClick={open}\n            />\n          )}\n        </Item>\n      </div>\n    </Gallery>\n  )\n};\n\nconst Kittens = () => {\n  const [photos, setPhotos] = useState(items)\n  button('add', () => setPhotos([createItem(photos.length + 1), ...photos]))\n  button('remove', () => setPhotos(photos.slice(1)))\n  button('swap first two', () =>\n    setPhotos([photos[1], photos[0], ...photos.slice(2)]),\n  )\n  button('swap last two', () =>\n    setPhotos([\n      ...photos.slice(0, photos.length - 2),\n      photos[photos.length - 1],\n      photos[photos.length - 2],\n    ]),\n  )\n  button('shuffle', () => setPhotos([...shuffle(photos)]))\n  const currentItem = number('current item', 0)\n  const { open } = useGallery()\n\n  return (\n    <>\n      {photos.map((props) => (\n        <ImageItem {...props} key={props.original} />\n      ))}\n      <div>\n        <button type=\"button\" onClick={() => open(currentItem)}>\n          {`Show kitty #${currentItem + 1}`}\n        </button>\n      </div>\n    </>\n  )\n}\n\nexport const playground = () => {\n  return (\n    <Gallery>\n      <Kittens />\n    </Gallery>\n  )\n};\n\nexport const sharedLayout = () => {\n  const layoutRef = useRef()\n  return (\n    <>\n      <h1>First Gallery</h1>\n      <CustomGallery ui={PhotoswipeUIDefault} layoutRef={layoutRef} id=\"first\">\n        {shuffle(items).map((props, i) => (\n          <ImageItem {...props} key={props.original} id={i} />\n        ))}\n      </CustomGallery>\n      <h1>Second Gallery</h1>\n      <CustomGallery ui={PhotoswipeUIDefault} layoutRef={layoutRef} id={2}>\n        {shuffle(items).map((props, i) => (\n          <ImageItem {...props} key={props.original} id={`kitten-${i}`} />\n        ))}\n      </CustomGallery>\n      <DefaultLayout\n        shareButton={false}\n        fullscreenButton={false}\n        zoomButton={false}\n        ref={layoutRef}\n      />\n    </>\n  )\n};\n\nexport const withoutImages = () => {\n  const [links, setLinks] = useState(items)\n  button('add', () => setLinks([createItem(links.length + 1), ...links]))\n  button('remove', () => setLinks(links.slice(1)))\n  button('swap first two', () =>\n    setLinks([links[1], links[0], ...links.slice(2)]),\n  )\n  button('swap last two', () =>\n    setLinks([\n      ...links.slice(0, links.length - 2),\n      links[links.length - 1],\n      links[links.length - 2],\n    ]),\n  )\n  button('shuffle', () => setLinks([...shuffle(links)]))\n  return (\n    <Gallery options={{ getThumbBoundsFn: undefined, showHideOpacity: true }}>\n      <ul>\n        {links.map((props) => (\n          <Item {...props} key={props.original}>\n            {({ ref, open }) => (\n              <li ref={ref as React.MutableRefObject<HTMLLIElement>}>\n                <a\n                  href=\"#\"\n                  onClick={(e) => {\n                    e.preventDefault()\n                    open()\n                  }}\n                >\n                  {props.title}\n                </a>\n              </li>\n            )}\n          </Item>\n        ))}\n      </ul>\n    </Gallery>\n  )\n};\n\nexport const withHtml = () => {\n  const html = `\n  <div style=\"\n    color: white;\n    display: flex;\n    place-content: center;\n    flex-direction: column;\n    height: 100%;\n    text-align: center;\n  \">\n    <h1>😿</h1>\n    There are no kittens :(\n  </div>\n  `\n  return (\n    <Gallery options={{ getThumbBoundsFn: undefined, showHideOpacity: true }}>\n      <Item html={html}>\n        {({ open }) => (\n          <a\n            href=\"#\"\n            onClick={(e) => {\n              e.preventDefault()\n              open()\n            }}\n          >\n            Open\n          </a>\n        )}\n      </Item>\n    </Gallery>\n  )\n};","import React from 'react'\nimport { InternalAPI } from './types'\n\nexport const Context = React.createContext<InternalAPI>({\n  remove: () => {},\n  set: () => {},\n  handleClick: () => {},\n  open: () => {},\n})\n","import PropTypes from 'prop-types'\nimport type { Options as PhotoswipeUiDefaultOptions } from 'photoswipe/dist/photoswipe-ui-default'\nimport type PhotoSwipe from 'photoswipe'\n\nexport const baseGalleryPropTypes = {\n  children: PropTypes.any,\n  options: PropTypes.object,\n  id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n}\n\nexport interface BaseGalleryProps {\n  /**\n   * PhotoSwipe options\n   *\n   * https://photoswipe.com/documentation/options.html\n   */\n  options?: PhotoSwipe.Options & PhotoswipeUiDefaultOptions\n\n  /**\n   * Gallery ID, for hash navigation\n   */\n  id?: string | number\n\n  /**\n   * Triggers after PhotoSwipe.init() call\n   *\n   * Use it for accessing PhotoSwipe API\n   *\n   * https://photoswipe.com/documentation/api.html\n   */\n  onOpen?: (photoswipe: PhotoSwipe<PhotoSwipe.Options>) => void\n}\n","import PhotoSwipe from 'photoswipe'\nimport React, { useRef, useCallback, useEffect, FC } from 'react'\nimport PropTypes from 'prop-types'\nimport { getElBounds, sortNodes } from './helpers'\nimport { Context } from './context'\nimport { ItemRef, InternalItem } from './types'\nimport { baseGalleryPropTypes, BaseGalleryProps } from './gallery-base'\n\ninterface PhotoSwipeItem extends PhotoSwipe.Item {\n  el: HTMLElement\n  pid?: string | number\n}\n\ntype PhotoSwipeUI =\n  | (new (\n      pswp: PhotoSwipe<PhotoSwipe.Options>,\n      framework: PhotoSwipe.UIFramework,\n    ) => PhotoSwipe.UI<PhotoSwipe.Options>)\n  | boolean\n\nexport interface CustomGalleryProps extends BaseGalleryProps {\n  /**\n   * Ref to your layout element\n   */\n  layoutRef: React.MutableRefObject<HTMLElement>\n\n  /**\n   * PhotoSwipe UI class\n   */\n  ui: PhotoSwipeUI\n}\n\n/**\n * Gallery component with ability to use specific UI and Layout\n */\nexport const CustomGallery: FC<CustomGalleryProps> = ({\n  children,\n  layoutRef,\n  ui,\n  options,\n  id: galleryUID,\n  onOpen,\n}) => {\n  const items = useRef(new Map<ItemRef, InternalItem>())\n  const openWhenReadyPid = useRef(null)\n\n  const open = useCallback(\n    (targetRef?: ItemRef, targetId?: string, itemIndex?: number) => {\n      let index: number | null = itemIndex || null\n\n      const normalized: PhotoSwipeItem[] = []\n\n      const entries = Array.from(items.current)\n\n      const prepare = (entry: [ItemRef, InternalItem], i: number) => {\n        const [\n          ref,\n          { width, height, title, original, thumbnail, id: pid, ...rest },\n        ] = entry\n        if (\n          targetRef === ref ||\n          (pid !== undefined && String(pid) === targetId)\n        ) {\n          index = i\n        }\n\n        normalized.push({\n          ...(title ? { title } : {}),\n          w: Number(width),\n          h: Number(height),\n          src: original,\n          msrc: thumbnail,\n          el: ref.current,\n          ...(pid !== undefined ? { pid } : {}),\n          ...rest,\n        })\n      }\n\n      if (items.current.size > 1) {\n        entries\n          .sort(([{ current: a }], [{ current: b }]) => sortNodes(a, b))\n          .forEach(prepare)\n      } else {\n        entries.forEach(prepare)\n      }\n\n      const layoutEl = layoutRef.current\n      if (layoutEl) {\n        const instance = new PhotoSwipe(layoutEl, ui, normalized, {\n          index: index === null ? parseInt(targetId, 10) - 1 : index,\n          getThumbBoundsFn: (thumbIndex) => {\n            const { el } = normalized[thumbIndex]\n            return el ? getElBounds(el) : { x: 0, y: 0, w: 0 }\n          },\n          history: false,\n          ...(galleryUID !== undefined\n            ? { galleryUID: galleryUID as number, history: true }\n            : {}),\n          ...(options || {}),\n        })\n\n        instance.init()\n\n        if (onOpen !== undefined && typeof onOpen === 'function') {\n          onOpen(instance)\n        }\n      }\n    },\n    [options, galleryUID, onOpen],\n  )\n\n  useEffect(() => {\n    if (galleryUID === undefined) {\n      return\n    }\n\n    const hash = window.location.hash.substring(1)\n    const params: { [key: string]: string } = {}\n\n    if (hash.length < 5) {\n      return\n    }\n\n    const vars = hash.split('&')\n\n    for (let i = 0; i < vars.length; i++) {\n      if (vars[i]) {\n        const [key, value] = vars[i].split('=')\n        if (key && value) {\n          params[key] = value\n        }\n      }\n    }\n\n    const { pid, gid } = params\n\n    if (items.current.size === 0) {\n      openWhenReadyPid.current = pid\n      return\n    }\n\n    if (pid && gid === String(galleryUID)) {\n      open(null, pid)\n    }\n  }, [open, galleryUID])\n\n  const remove = useCallback((ref) => {\n    items.current.delete(ref)\n  }, [])\n\n  const set = useCallback(\n    (ref, data: InternalItem) => {\n      const { id } = data\n      items.current.set(ref, data)\n\n      if (!openWhenReadyPid.current) return\n\n      if (id === openWhenReadyPid.current) {\n        open(ref)\n        openWhenReadyPid.current = null\n      } else if (!id) {\n        const index = parseInt(openWhenReadyPid.current, 10) - 1\n        const refToOpen = Array.from(items.current.keys())[index]\n        if (refToOpen) {\n          open(refToOpen)\n          openWhenReadyPid.current = null\n        }\n      }\n    },\n    [open],\n  )\n\n  const openAt = useCallback(\n    (index: number) => {\n      open(null, null, index)\n    },\n    [open],\n  )\n\n  return (\n    <Context.Provider value={{ remove, set, handleClick: open, open: openAt }}>\n      {children}\n    </Context.Provider>\n  )\n}\n\nCustomGallery.propTypes = {\n  ...baseGalleryPropTypes,\n  // @ts-ignore\n  layoutRef: PropTypes.shape({\n    current: PropTypes.instanceOf(\n      typeof Element === 'undefined' ? class Element {} : Element,\n    ),\n  }).isRequired,\n  ui: PropTypes.any.isRequired,\n}\n","import PhotoswipeUIDefault from 'photoswipe/dist/photoswipe-ui-default'\nimport React, { useRef, FC } from 'react'\nimport { CustomGallery, DefaultLayout, layoutPropTypes, LayoutProps } from '.'\nimport { baseGalleryPropTypes, BaseGalleryProps } from './gallery-base'\n\nexport type GalleryProps = BaseGalleryProps & LayoutProps\n\n/**\n * Gallery component with default Layout and UI\n */\nexport const Gallery: FC<GalleryProps> = ({\n  children,\n  options,\n  id,\n  onOpen,\n  ...restProps\n}) => {\n  const defaultLayoutRef = useRef<HTMLElement>()\n  return (\n    <CustomGallery\n      layoutRef={defaultLayoutRef}\n      ui={PhotoswipeUIDefault}\n      options={options}\n      id={id}\n      onOpen={onOpen}\n    >\n      {children}\n      <DefaultLayout {...restProps} ref={defaultLayoutRef} />\n    </CustomGallery>\n  )\n}\n\nGallery.propTypes = {\n  ...baseGalleryPropTypes,\n  ...layoutPropTypes,\n}\n","import { NoRefError } from './no-ref-error'\n\nexport const getElBounds = (el: HTMLElement) => {\n  const pageXScroll = window.pageXOffset || document.documentElement.scrollLeft\n  const pageYScroll = window.pageYOffset || document.documentElement.scrollTop\n  const rect = el.getBoundingClientRect()\n  return {\n    x: rect.left + pageXScroll,\n    y: rect.top + pageYScroll,\n    w: rect.width,\n  }\n}\n\nexport function sortNodes(a?: Element, b?: Element) {\n  if (!(a instanceof Element)) {\n    throw new NoRefError()\n  }\n  if (a === b) return 0\n  // eslint-disable-next-line no-bitwise\n  if (a.compareDocumentPosition(b) & 2) {\n    return 1\n  }\n  return -1\n}\n\nexport function shuffle<T>(array: T[]) {\n  const result = [...array]\n  let currentIndex = result.length\n  let temp: any\n  let randomIndex: number\n  while (currentIndex !== 0) {\n    randomIndex = Math.floor(Math.random() * currentIndex)\n    currentIndex -= 1\n    temp = result[currentIndex]\n    // eslint-disable-next-line no-param-reassign\n    result[currentIndex] = result[randomIndex]\n    // eslint-disable-next-line no-param-reassign\n    result[randomIndex] = temp\n  }\n\n  return result\n}\n","import React from 'react'\nimport { Context } from './context'\n\n/**\n * A hook that gives you access to provided methods for more advanced usage\n */\nexport const useGallery = () => {\n  const { open } = React.useContext(Context)\n  return {\n    /**\n     * Function that opens the gallery at the provided index\n     */\n    open,\n  }\n}\n","export * from './photoswipe-layout'\nexport * from './gallery-custom'\nexport * from './gallery-default'\nexport * from './item'\nexport * from './types'\nexport * from './hooks'\n","import { useRef, useCallback, useContext, useEffect, FC } from 'react'\nimport PropTypes from 'prop-types'\nimport { ItemRef } from './types'\nimport { Context } from './context'\n\ninterface ChildrenFnProps {\n  /**\n   * Required `ref` object to any html node of item\n   *\n   * Can be omitted if there is only one item in gallery\n   */\n  ref: ItemRef\n\n  /**\n   * Function that opens the gallery at the current item's index\n   */\n  open: () => void\n}\n\nexport interface ItemProps {\n  /**\n   * Render prop for exposing Gallery API\n   */\n  children: (props: ChildrenFnProps) => JSX.Element\n\n  /**\n   * Url of original image\n   */\n  original?: string\n\n  /**\n   * Url of thumbnail\n   */\n  thumbnail?: string\n\n  /**\n   * Width of original image\n   */\n  width?: string | number\n\n  /**\n   * Height of original image\n   */\n  height?: string | number\n\n  /**\n   * Title for Default UI\n   */\n  title?: string\n\n  /**\n   * Html content, if you need to use it as modal\n   */\n  html?: string\n\n  /**\n   * Item ID, for hash navigation\n   */\n  id?: string | number\n}\n\n/**\n * Gallery item\n *\n * Should be a children of Gallery or CustomGallery component\n */\nexport const Item: FC<ItemProps> = ({ children, ...restProps }) => {\n  const ref: ItemRef = useRef()\n  const { remove, set, handleClick } = useContext(Context)\n  const open = useCallback(() => handleClick(ref), [])\n\n  useEffect(() => {\n    set(ref, restProps)\n    return () => remove(ref)\n  }, Object.values(restProps))\n\n  return children({ ref, open })\n}\n\nItem.propTypes = {\n  original: PropTypes.string,\n  thumbnail: PropTypes.string,\n  width: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  height: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  title: PropTypes.string,\n  html: PropTypes.string,\n  children: PropTypes.func.isRequired,\n  id: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n}\n","export class NoRefError extends Error {\n  message = `No valid \\`ref\\` provided.\nYou shuld use \\`ref\\` from render prop of Item component.\nExample:\n<Item>{({ ref }) => <div ref={ref}></div>}</Item>\\n`\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nexport const layoutPropTypes = {\n  closeButtonCaption: PropTypes.string,\n  shareButtonCaption: PropTypes.string,\n  toggleFullscreenButtonCaption: PropTypes.string,\n  zoomButtonCaption: PropTypes.string,\n  prevButtonCaption: PropTypes.string,\n  nextButtonCaption: PropTypes.string,\n  shareButton: PropTypes.bool,\n  fullscreenButton: PropTypes.bool,\n  zoomButton: PropTypes.bool,\n}\n\nexport const layoutDefaultProps = {\n  closeButtonCaption: 'Close (Esc)',\n  shareButtonCaption: 'Share',\n  toggleFullscreenButtonCaption: 'Toggle fullscreen',\n  zoomButtonCaption: 'Zoom in/out',\n  prevButtonCaption: 'Previous (arrow left)',\n  nextButtonCaption: 'Next (arrow right)',\n  shareButton: true,\n  fullscreenButton: true,\n  zoomButton: true,\n}\n\nexport type LayoutProps = {\n  /**\n   * `.pswp__button--close` caption\n   *\n   * Default: 'Close (Esc)'\n   */\n  closeButtonCaption?: string\n\n  /**\n   * `.pswp__button--share` caption\n   *\n   * Default: 'Share'\n   */\n  shareButtonCaption?: string\n\n  /**\n   * .pswp__button--fs caption\n   *\n   * Default: 'Toggle fullscreen'\n   */\n  toggleFullscreenButtonCaption?: string\n\n  /**\n   * .pswp__button--zoom caption\n   *\n   * Default: 'Zoom in/out'\n   */\n  zoomButtonCaption?: string\n\n  /**\n   * .pswp__button--arrow--left caption\n   *\n   * Default: 'Previous (arrow left)'\n   */\n  prevButtonCaption?: string\n\n  /**\n   * .pswp__button--arrow--right caption\n   *\n   * Default: 'Next (arrow right)'\n   */\n  nextButtonCaption?: string\n\n  /**\n   * Show .pswp__button--share\n   *\n   * Default: true\n   */\n  shareButton?: boolean\n\n  /**\n   * Show .pswp__button--fs\n   *\n   * Default: true\n   */\n  fullscreenButton?: boolean\n\n  /**\n   * Show .pswp__button--zoom\n   *\n   * Default: true\n   */\n  zoomButton?: boolean\n}\n\n/**\n * Default PhotoSwipe layout\n */\nexport const DefaultLayout = React.forwardRef<HTMLElement, LayoutProps>(\n  (\n    {\n      closeButtonCaption,\n      shareButtonCaption,\n      toggleFullscreenButtonCaption,\n      zoomButtonCaption,\n      prevButtonCaption,\n      nextButtonCaption,\n      shareButton,\n      fullscreenButton,\n      zoomButton,\n      ...rest\n    },\n    ref,\n  ) => (\n    <div\n      className=\"pswp\"\n      tabIndex={-1}\n      role=\"dialog\"\n      aria-hidden=\"true\"\n      {...rest}\n      ref={ref as React.MutableRefObject<HTMLDivElement>}\n    >\n      <div className=\"pswp__bg\" />\n      <div className=\"pswp__scroll-wrap\">\n        <div className=\"pswp__container\">\n          <div className=\"pswp__item\" />\n          <div className=\"pswp__item\" />\n          <div className=\"pswp__item\" />\n        </div>\n        <div className=\"pswp__ui pswp__ui--hidden\">\n          <div className=\"pswp__top-bar\">\n            <div className=\"pswp__counter\" />\n            <button\n              type=\"button\"\n              className=\"pswp__button pswp__button--close\"\n              title={closeButtonCaption}\n            />\n            {shareButton && (\n              <button\n                type=\"button\"\n                className=\"pswp__button pswp__button--share\"\n                title={shareButtonCaption}\n              />\n            )}\n            {fullscreenButton && (\n              <button\n                type=\"button\"\n                className=\"pswp__button pswp__button--fs\"\n                title={toggleFullscreenButtonCaption}\n              />\n            )}\n            {zoomButton && (\n              <button\n                type=\"button\"\n                className=\"pswp__button pswp__button--zoom\"\n                title={zoomButtonCaption}\n              />\n            )}\n            <div className=\"pswp__preloader\">\n              <div className=\"pswp__preloader__icn\">\n                <div className=\"pswp__preloader__cut\">\n                  <div className=\"pswp__preloader__donut\" />\n                </div>\n              </div>\n            </div>\n          </div>\n          <div className=\"pswp__share-modal pswp__share-modal--hidden pswp__single-tap\">\n            <div className=\"pswp__share-tooltip\" />\n          </div>\n          <button\n            type=\"button\"\n            className=\"pswp__button pswp__button--arrow--left\"\n            title={prevButtonCaption}\n          />\n          <button\n            type=\"button\"\n            className=\"pswp__button pswp__button--arrow--right\"\n            title={nextButtonCaption}\n          />\n          <div className=\"pswp__caption\">\n            <div className=\"pswp__caption__center\" />\n          </div>\n        </div>\n      </div>\n    </div>\n  ),\n)\n\nDefaultLayout.propTypes = layoutPropTypes\n\nDefaultLayout.defaultProps = layoutDefaultProps\n","var map = {\n\t\"./index.stories.tsx\": 13412\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 93341;"],"names":["require","configure","module","parameters","title","decorators","withKnobs","createItem","index","original","thumbnail","width","height","items","Array","from","length","_","i","ImageItem","id","useState","fullTitle","setFullTitle","Item","ref","open","style","display","margin","onClick","src","cursor","marginBottom","type","value","onChange","e","target","boxSizing","simple","smallItemStyles","objectFit","maxHeight","Gallery","gridTemplateColumns","gridTemplateRows","gridGap","gridColumnStart","Kittens","photos","setPhotos","button","slice","shuffle","currentItem","number","useGallery","map","props","key","playground","sharedLayout","layoutRef","useRef","CustomGallery","ui","DefaultLayout","shareButton","fullscreenButton","zoomButton","withoutImages","links","setLinks","options","getThumbBoundsFn","undefined","showHideOpacity","href","preventDefault","withHtml","html","Context","createContext","remove","set","handleClick","baseGalleryPropTypes","children","any","object","oneOfType","string","galleryUID","onOpen","Map","openWhenReadyPid","useCallback","targetRef","targetId","itemIndex","normalized","entries","current","prepare","entry","pid","rest","String","push","w","Number","h","msrc","el","size","sort","a","b","sortNodes","forEach","layoutEl","instance","parseInt","thumbIndex","getElBounds","x","y","history","init","useEffect","hash","window","location","substring","params","vars","split","gid","data","refToOpen","keys","openAt","Provider","shape","instanceOf","Element","isRequired","restProps","defaultLayoutRef","layoutPropTypes","pageXScroll","pageXOffset","document","documentElement","scrollLeft","pageYScroll","pageYOffset","scrollTop","rect","getBoundingClientRect","left","top","NoRefError","compareDocumentPosition","array","temp","randomIndex","result","currentIndex","Math","floor","random","useContext","Object","values","func","message","Error","closeButtonCaption","shareButtonCaption","toggleFullscreenButtonCaption","zoomButtonCaption","prevButtonCaption","nextButtonCaption","bool","layoutDefaultProps","forwardRef","className","tabIndex","role","webpackContext","req","webpackContextResolve","__webpack_require__","o","code","webpackContextKeys","resolve","exports"],"sourceRoot":""}