(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{274:function(module,exports,__webpack_require__){"use strict";var __read=this&&this.__read||function(o,n){var m="function"==typeof Symbol&&o[Symbol.iterator];if(!m)return o;var r,e,i=m.call(o),ar=[];try{for(;(void 0===n||n-- >0)&&!(r=i.next()).done;)ar.push(r.value)}catch(error){e={error:error}}finally{try{r&&!r.done&&(m=i.return)&&m.call(i)}finally{if(e)throw e.error}}return ar},__spread=this&&this.__spread||function(){for(var ar=[],i=0;i<arguments.length;i++)ar=ar.concat(__read(arguments[i]));return ar};Object.defineProperty(exports,"__esModule",{value:!0});var no_ref_error_1=__webpack_require__(607);exports.getElBounds=function(el){var pageXScroll=window.pageXOffset||document.documentElement.scrollLeft,pageYScroll=window.pageYOffset||document.documentElement.scrollTop,rect=el.getBoundingClientRect();return{x:rect.left+pageXScroll,y:rect.top+pageYScroll,w:rect.width}},exports.sortNodes=function sortNodes(a,b){if(!(a instanceof Element))throw new no_ref_error_1.NoRefError;return a===b?0:2&a.compareDocumentPosition(b)?1:-1},exports.shuffle=function shuffle(array){for(var temp,randomIndex,result=__spread(array),currentIndex=result.length;0!==currentIndex;)randomIndex=Math.floor(Math.random()*currentIndex),temp=result[currentIndex-=1],result[currentIndex]=result[randomIndex],result[randomIndex]=temp;return result}},275:function(module,exports,__webpack_require__){"use strict";function __export(m){for(var p in m)exports.hasOwnProperty(p)||(exports[p]=m[p])}Object.defineProperty(exports,"__esModule",{value:!0}),__export(__webpack_require__(608)),__export(__webpack_require__(611)),__export(__webpack_require__(613)),__export(__webpack_require__(614))},276:function(module,exports,__webpack_require__){"use strict";var __importDefault=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{default:mod}};Object.defineProperty(exports,"__esModule",{value:!0});var react_1=__importDefault(__webpack_require__(30));exports.Context=react_1.default.createContext({remove:function(){},set:function(){},handleClick:function(){}})},277:function(module,exports,__webpack_require__){"use strict";var __importDefault=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{default:mod}};Object.defineProperty(exports,"__esModule",{value:!0});var prop_types_1=__importDefault(__webpack_require__(116));exports.baseGalleryPropTypes={children:prop_types_1.default.any,options:prop_types_1.default.object,id:prop_types_1.default.oneOfType([prop_types_1.default.string,prop_types_1.default.number])}},280:function(module,exports,__webpack_require__){__webpack_require__(281),__webpack_require__(427),__webpack_require__(428),module.exports=__webpack_require__(592)},345:function(module,exports){},428:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__);__webpack_require__(212)},592:function(module,exports,__webpack_require__){"use strict";(function(module){var _framework=__webpack_require__(212);module._StorybookPreserveDecorators=!0,(0,_framework.configure)([__webpack_require__(593)],module)}).call(this,__webpack_require__(57)(module))},593:function(module,exports,__webpack_require__){var map={"./index.stories.tsx":594};function webpackContext(req){var id=webpackContextResolve(req);return __webpack_require__(id)}function webpackContextResolve(req){if(!__webpack_require__.o(map,req)){var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e}return map[req]}webpackContext.keys=function webpackContextKeys(){return Object.keys(map)},webpackContext.resolve=webpackContextResolve,module.exports=webpackContext,webpackContext.id=593},594:function(module,exports,__webpack_require__){"use strict";var __assign=this&&this.__assign||function(){return(__assign=Object.assign||function(t){for(var s,i=1,n=arguments.length;i<n;i++)for(var p in s=arguments[i])Object.prototype.hasOwnProperty.call(s,p)&&(t[p]=s[p]);return t}).apply(this,arguments)},__read=this&&this.__read||function(o,n){var m="function"==typeof Symbol&&o[Symbol.iterator];if(!m)return o;var r,e,i=m.call(o),ar=[];try{for(;(void 0===n||n-- >0)&&!(r=i.next()).done;)ar.push(r.value)}catch(error){e={error:error}}finally{try{r&&!r.done&&(m=i.return)&&m.call(i)}finally{if(e)throw e.error}}return ar},__spread=this&&this.__spread||function(){for(var ar=[],i=0;i<arguments.length;i++)ar=ar.concat(__read(arguments[i]));return ar},__importStar=this&&this.__importStar||function(mod){if(mod&&mod.__esModule)return mod;var result={};if(null!=mod)for(var k in mod)Object.hasOwnProperty.call(mod,k)&&(result[k]=mod[k]);return result.default=mod,result},__importDefault=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{default:mod}};Object.defineProperty(exports,"__esModule",{value:!0});var react_1=__importStar(__webpack_require__(30)),photoswipe_ui_default_1=__importDefault(__webpack_require__(272)),addon_knobs_1=__webpack_require__(595),helpers_1=__webpack_require__(274),_1=__webpack_require__(275);__webpack_require__(615),__webpack_require__(617),exports.default={parameters:{storySource:{source:'import React, { useState, useRef, FC } from \'react\'\nimport PhotoswipeUIDefault from \'photoswipe/dist/photoswipe-ui-default\'\nimport { withKnobs, button } from \'@storybook/addon-knobs\'\nimport { shuffle } from \'./helpers\'\nimport { InternalItem } from \'./types\'\nimport { Gallery, CustomGallery, Item, DefaultLayout } from \'.\'\nimport \'photoswipe/dist/photoswipe.css\'\nimport \'photoswipe/dist/default-skin/default-skin.css\'\n\nexport default { title: \'Gallery\', decorators: [withKnobs] }\n\nconst createItem = (index: number): InternalItem => ({\n  original: `https://placekitten.com/1024/768?image=${index}`,\n  thumbnail: `https://placekitten.com/160/120?image=${index}`,\n  width: 1024,\n  height: 768,\n  title: `kitty #${index}`,\n})\n\nconst items = Array.from({ length: 3 }, (_, i) => createItem(i + 1))\n\nconst ImageItem: FC<InternalItem> = ({\n  original,\n  thumbnail,\n  width,\n  height,\n  title,\n  id,\n}) => {\n  const [fullTitle, setFullTitle] = useState(title)\n  return (\n    <Item\n      original={original}\n      thumbnail={thumbnail}\n      width={width}\n      height={height}\n      title={fullTitle}\n      id={id}\n    >\n      {({ ref, open }) => (\n        <div style={{ display: \'inline-block\', margin: 5 }}>\n          <img\n            onClick={open}\n            src={thumbnail}\n            ref={ref as React.MutableRefObject<HTMLImageElement>}\n            style={{ display: \'block\', cursor: \'pointer\', marginBottom: 5 }}\n          />\n          <input\n            type="text"\n            value={fullTitle}\n            onChange={(e) => setFullTitle(e.target.value)}\n            style={{ width: \'100%\', boxSizing: \'border-box\' }}\n          />\n        </div>\n      )}\n    </Item>\n  )\n}\n\nexport const simple = () => {\n  const smallItemStyles: React.CSSProperties = {\n    cursor: \'pointer\',\n    objectFit: \'cover\',\n    width: \'100%\',\n    maxHeight: \'100%\',\n  }\n  return (\n    <Gallery id="simple-gallery">\n      <div\n        style={{\n          display: \'grid\',\n          gridTemplateColumns: \'240px 171px 171px\',\n          gridTemplateRows: \'114px 114px\',\n          gridGap: 12,\n        }}\n      >\n        <Item\n          original="https://farm4.staticflickr.com/3894/15008518202_c265dfa55f_h.jpg"\n          thumbnail="https://farm4.staticflickr.com/3894/15008518202_b016d7d289_m.jpg"\n          width="1600"\n          height="1600"\n          title="Author: Folkert Gorter"\n          id="so-first"\n        >\n          {({ ref, open }) => (\n            <img\n              style={{ cursor: \'pointer\' }}\n              src="https://farm4.staticflickr.com/3894/15008518202_b016d7d289_m.jpg"\n              ref={ref as React.MutableRefObject<HTMLImageElement>}\n              onClick={open}\n            />\n          )}\n        </Item>\n        <Item\n          original="https://farm6.staticflickr.com/5591/15008867125_b61960af01_h.jpg"\n          thumbnail="https://farm6.staticflickr.com/5591/15008867125_68a8ed88cc_m.jpg"\n          width="1600"\n          height="1068"\n          title="Author: Samuel Rohl"\n        >\n          {({ ref, open }) => (\n            <img\n              style={smallItemStyles}\n              src="https://farm6.staticflickr.com/5591/15008867125_68a8ed88cc_m.jpg"\n              ref={ref as React.MutableRefObject<HTMLImageElement>}\n              onClick={open}\n            />\n          )}\n        </Item>\n        <Item\n          original="https://farm4.staticflickr.com/3902/14985871946_86abb8c56f_b.jpg"\n          thumbnail="https://farm4.staticflickr.com/3902/14985871946_86abb8c56f_m.jpg"\n          width="1600"\n          height="1066"\n          title="Author: Ales Krivec"\n        >\n          {({ ref, open }) => (\n            <img\n              style={smallItemStyles}\n              src="https://farm4.staticflickr.com/3902/14985871946_86abb8c56f_m.jpg"\n              ref={ref as React.MutableRefObject<HTMLImageElement>}\n              onClick={open}\n            />\n          )}\n        </Item>\n        <Item\n          original="https://farm6.staticflickr.com/5584/14985868676_b51baa4071_h.jpg"\n          thumbnail="https://farm6.staticflickr.com/5584/14985868676_4b802b932a_m.jpg"\n          width="1600"\n          height="1066"\n          title="Author: Michael Hull"\n        >\n          {({ ref, open }) => (\n            <img\n              style={{ ...smallItemStyles, gridColumnStart: 2 }}\n              src="https://farm6.staticflickr.com/5584/14985868676_4b802b932a_m.jpg"\n              ref={ref as React.MutableRefObject<HTMLImageElement>}\n              onClick={open}\n            />\n          )}\n        </Item>\n        <Item\n          original="https://farm4.staticflickr.com/3920/15008465772_d50c8f0531_h.jpg"\n          thumbnail="https://farm4.staticflickr.com/3920/15008465772_383e697089_m.jpg"\n          width="1600"\n          height="1066"\n          title="Author: Thomas Lefebvre"\n        >\n          {({ ref, open }) => (\n            <img\n              style={smallItemStyles}\n              src="https://farm4.staticflickr.com/3920/15008465772_383e697089_m.jpg"\n              ref={ref as React.MutableRefObject<HTMLImageElement>}\n              onClick={open}\n            />\n          )}\n        </Item>\n      </div>\n    </Gallery>\n  )\n}\n\nexport const playground = () => {\n  const [photos, setPhotos] = useState(items)\n  button(\'add\', () => setPhotos([createItem(photos.length + 1), ...photos]))\n  button(\'remove\', () => setPhotos(photos.slice(1)))\n  button(\'swap first two\', () =>\n    setPhotos([photos[1], photos[0], ...photos.slice(2)]),\n  )\n  button(\'swap last two\', () =>\n    setPhotos([\n      ...photos.slice(0, photos.length - 2),\n      photos[photos.length - 1],\n      photos[photos.length - 2],\n    ]),\n  )\n  button(\'shuffle\', () => setPhotos([...shuffle(photos)]))\n  return (\n    <Gallery>\n      {photos.map((props) => (\n        <ImageItem {...props} key={props.original} />\n      ))}\n    </Gallery>\n  )\n}\n\nexport const sharedLayout = () => {\n  const layoutRef = useRef()\n  return (\n    <>\n      <h1>First Gallery</h1>\n      <CustomGallery ui={PhotoswipeUIDefault} layoutRef={layoutRef} id="first">\n        {shuffle(items).map((props, i) => (\n          <ImageItem {...props} key={props.original} id={i} />\n        ))}\n      </CustomGallery>\n      <h1>Second Gallery</h1>\n      <CustomGallery ui={PhotoswipeUIDefault} layoutRef={layoutRef} id={2}>\n        {shuffle(items).map((props, i) => (\n          <ImageItem {...props} key={props.original} id={`kitten-${i}`} />\n        ))}\n      </CustomGallery>\n      <DefaultLayout\n        shareButton={false}\n        fullscreenButton={false}\n        zoomButton={false}\n        ref={layoutRef}\n      />\n    </>\n  )\n}\n\nexport const withoutImages = () => {\n  const [links, setLinks] = useState(items)\n  button(\'add\', () => setLinks([createItem(links.length + 1), ...links]))\n  button(\'remove\', () => setLinks(links.slice(1)))\n  button(\'swap first two\', () =>\n    setLinks([links[1], links[0], ...links.slice(2)]),\n  )\n  button(\'swap last two\', () =>\n    setLinks([\n      ...links.slice(0, links.length - 2),\n      links[links.length - 1],\n      links[links.length - 2],\n    ]),\n  )\n  button(\'shuffle\', () => setLinks([...shuffle(links)]))\n  return (\n    <Gallery options={{ getThumbBoundsFn: undefined, showHideOpacity: true }}>\n      <ul>\n        {links.map((props) => (\n          <Item {...props} key={props.original}>\n            {({ ref, open }) => (\n              <li ref={ref as React.MutableRefObject<HTMLLIElement>}>\n                <a\n                  href="#"\n                  onClick={(e) => {\n                    e.preventDefault()\n                    open()\n                  }}\n                >\n                  {props.title}\n                </a>\n              </li>\n            )}\n          </Item>\n        ))}\n      </ul>\n    </Gallery>\n  )\n}\n\nexport const withHtml = () => {\n  const html = `\n  <div style="\n    color: white;\n    display: flex;\n    place-content: center;\n    flex-direction: column;\n    height: 100%;\n    text-align: center;\n  ">\n    <h1>😿</h1>\n    There are no kittens :(\n  </div>\n  `\n  return (\n    <Gallery options={{ getThumbBoundsFn: undefined, showHideOpacity: true }}>\n      <Item html={html}>\n        {({ open }) => (\n          <a\n            href="#"\n            onClick={(e) => {\n              e.preventDefault()\n              open()\n            }}\n          >\n            Open\n          </a>\n        )}\n      </Item>\n    </Gallery>\n  )\n}\n',locationsMap:{"gallery--simple":{startLoc:{col:22,line:60},endLoc:{col:1,line:161},startBody:{col:22,line:60},endBody:{col:1,line:161}},"gallery--playground":{startLoc:{col:26,line:163},endLoc:{col:1,line:185},startBody:{col:26,line:163},endBody:{col:1,line:185}},"gallery--shared-layout":{startLoc:{col:28,line:187},endLoc:{col:1,line:211},startBody:{col:28,line:187},endBody:{col:1,line:211}},"gallery--without-images":{startLoc:{col:29,line:213},endLoc:{col:1,line:251},startBody:{col:29,line:213},endBody:{col:1,line:251}},"gallery--with-html":{startLoc:{col:24,line:253},endLoc:{col:1,line:284},startBody:{col:24,line:253},endBody:{col:1,line:284}}}}},title:"Gallery",decorators:[addon_knobs_1.withKnobs]};var createItem=function(index){return{original:"https://placekitten.com/1024/768?image="+index,thumbnail:"https://placekitten.com/160/120?image="+index,width:1024,height:768,title:"kitty #"+index}},items=Array.from({length:3},(function(_,i){return createItem(i+1)})),ImageItem=function(_a){var original=_a.original,thumbnail=_a.thumbnail,width=_a.width,height=_a.height,title=_a.title,id=_a.id,_b=__read(react_1.useState(title),2),fullTitle=_b[0],setFullTitle=_b[1];return react_1.default.createElement(_1.Item,{original:original,thumbnail:thumbnail,width:width,height:height,title:fullTitle,id:id},(function(_a){var ref=_a.ref,open=_a.open;return react_1.default.createElement("div",{style:{display:"inline-block",margin:5}},react_1.default.createElement("img",{onClick:open,src:thumbnail,ref:ref,style:{display:"block",cursor:"pointer",marginBottom:5}}),react_1.default.createElement("input",{type:"text",value:fullTitle,onChange:function(e){return setFullTitle(e.target.value)},style:{width:"100%",boxSizing:"border-box"}}))}))};exports.simple=function(){var smallItemStyles={cursor:"pointer",objectFit:"cover",width:"100%",maxHeight:"100%"};return react_1.default.createElement(_1.Gallery,{id:"simple-gallery"},react_1.default.createElement("div",{style:{display:"grid",gridTemplateColumns:"240px 171px 171px",gridTemplateRows:"114px 114px",gridGap:12}},react_1.default.createElement(_1.Item,{original:"https://farm4.staticflickr.com/3894/15008518202_c265dfa55f_h.jpg",thumbnail:"https://farm4.staticflickr.com/3894/15008518202_b016d7d289_m.jpg",width:"1600",height:"1600",title:"Author: Folkert Gorter",id:"so-first"},(function(_a){var ref=_a.ref,open=_a.open;return react_1.default.createElement("img",{style:{cursor:"pointer"},src:"https://farm4.staticflickr.com/3894/15008518202_b016d7d289_m.jpg",ref:ref,onClick:open})})),react_1.default.createElement(_1.Item,{original:"https://farm6.staticflickr.com/5591/15008867125_b61960af01_h.jpg",thumbnail:"https://farm6.staticflickr.com/5591/15008867125_68a8ed88cc_m.jpg",width:"1600",height:"1068",title:"Author: Samuel Rohl"},(function(_a){var ref=_a.ref,open=_a.open;return react_1.default.createElement("img",{style:smallItemStyles,src:"https://farm6.staticflickr.com/5591/15008867125_68a8ed88cc_m.jpg",ref:ref,onClick:open})})),react_1.default.createElement(_1.Item,{original:"https://farm4.staticflickr.com/3902/14985871946_86abb8c56f_b.jpg",thumbnail:"https://farm4.staticflickr.com/3902/14985871946_86abb8c56f_m.jpg",width:"1600",height:"1066",title:"Author: Ales Krivec"},(function(_a){var ref=_a.ref,open=_a.open;return react_1.default.createElement("img",{style:smallItemStyles,src:"https://farm4.staticflickr.com/3902/14985871946_86abb8c56f_m.jpg",ref:ref,onClick:open})})),react_1.default.createElement(_1.Item,{original:"https://farm6.staticflickr.com/5584/14985868676_b51baa4071_h.jpg",thumbnail:"https://farm6.staticflickr.com/5584/14985868676_4b802b932a_m.jpg",width:"1600",height:"1066",title:"Author: Michael Hull"},(function(_a){var ref=_a.ref,open=_a.open;return react_1.default.createElement("img",{style:__assign(__assign({},smallItemStyles),{gridColumnStart:2}),src:"https://farm6.staticflickr.com/5584/14985868676_4b802b932a_m.jpg",ref:ref,onClick:open})})),react_1.default.createElement(_1.Item,{original:"https://farm4.staticflickr.com/3920/15008465772_d50c8f0531_h.jpg",thumbnail:"https://farm4.staticflickr.com/3920/15008465772_383e697089_m.jpg",width:"1600",height:"1066",title:"Author: Thomas Lefebvre"},(function(_a){var ref=_a.ref,open=_a.open;return react_1.default.createElement("img",{style:smallItemStyles,src:"https://farm4.staticflickr.com/3920/15008465772_383e697089_m.jpg",ref:ref,onClick:open})}))))},exports.playground=function(){var _a=__read(react_1.useState(items),2),photos=_a[0],setPhotos=_a[1];return addon_knobs_1.button("add",(function(){return setPhotos(__spread([createItem(photos.length+1)],photos))})),addon_knobs_1.button("remove",(function(){return setPhotos(photos.slice(1))})),addon_knobs_1.button("swap first two",(function(){return setPhotos(__spread([photos[1],photos[0]],photos.slice(2)))})),addon_knobs_1.button("swap last two",(function(){return setPhotos(__spread(photos.slice(0,photos.length-2),[photos[photos.length-1],photos[photos.length-2]]))})),addon_knobs_1.button("shuffle",(function(){return setPhotos(__spread(helpers_1.shuffle(photos)))})),react_1.default.createElement(_1.Gallery,null,photos.map((function(props){return react_1.default.createElement(ImageItem,__assign({},props,{key:props.original}))})))},exports.sharedLayout=function(){var layoutRef=react_1.useRef();return react_1.default.createElement(react_1.default.Fragment,null,react_1.default.createElement("h1",null,"First Gallery"),react_1.default.createElement(_1.CustomGallery,{ui:photoswipe_ui_default_1.default,layoutRef:layoutRef,id:"first"},helpers_1.shuffle(items).map((function(props,i){return react_1.default.createElement(ImageItem,__assign({},props,{key:props.original,id:i}))}))),react_1.default.createElement("h1",null,"Second Gallery"),react_1.default.createElement(_1.CustomGallery,{ui:photoswipe_ui_default_1.default,layoutRef:layoutRef,id:2},helpers_1.shuffle(items).map((function(props,i){return react_1.default.createElement(ImageItem,__assign({},props,{key:props.original,id:"kitten-"+i}))}))),react_1.default.createElement(_1.DefaultLayout,{shareButton:!1,fullscreenButton:!1,zoomButton:!1,ref:layoutRef}))},exports.withoutImages=function(){var _a=__read(react_1.useState(items),2),links=_a[0],setLinks=_a[1];return addon_knobs_1.button("add",(function(){return setLinks(__spread([createItem(links.length+1)],links))})),addon_knobs_1.button("remove",(function(){return setLinks(links.slice(1))})),addon_knobs_1.button("swap first two",(function(){return setLinks(__spread([links[1],links[0]],links.slice(2)))})),addon_knobs_1.button("swap last two",(function(){return setLinks(__spread(links.slice(0,links.length-2),[links[links.length-1],links[links.length-2]]))})),addon_knobs_1.button("shuffle",(function(){return setLinks(__spread(helpers_1.shuffle(links)))})),react_1.default.createElement(_1.Gallery,{options:{getThumbBoundsFn:void 0,showHideOpacity:!0}},react_1.default.createElement("ul",null,links.map((function(props){return react_1.default.createElement(_1.Item,__assign({},props,{key:props.original}),(function(_a){var ref=_a.ref,open=_a.open;return react_1.default.createElement("li",{ref:ref},react_1.default.createElement("a",{href:"#",onClick:function(e){e.preventDefault(),open()}},props.title))}))}))))},exports.withHtml=function(){return react_1.default.createElement(_1.Gallery,{options:{getThumbBoundsFn:void 0,showHideOpacity:!0}},react_1.default.createElement(_1.Item,{html:'\n  <div style="\n    color: white;\n    display: flex;\n    place-content: center;\n    flex-direction: column;\n    height: 100%;\n    text-align: center;\n  ">\n    <h1>😿</h1>\n    There are no kittens :(\n  </div>\n  '},(function(_a){var open=_a.open;return react_1.default.createElement("a",{href:"#",onClick:function(e){e.preventDefault(),open()}},"Open")})))}},607:function(module,exports,__webpack_require__){"use strict";var extendStatics,__extends=this&&this.__extends||(extendStatics=function(d,b){return(extendStatics=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(d,b){d.__proto__=b}||function(d,b){for(var p in b)b.hasOwnProperty(p)&&(d[p]=b[p])})(d,b)},function(d,b){function __(){this.constructor=d}extendStatics(d,b),d.prototype=null===b?Object.create(b):(__.prototype=b.prototype,new __)});Object.defineProperty(exports,"__esModule",{value:!0});var NoRefError=function(_super){function NoRefError(){var _this=null!==_super&&_super.apply(this,arguments)||this;return _this.message="No valid `ref` provided.\nYou shuld use `ref` from render prop of Item component.\nExample:\n<Item>{({ ref }) => <div ref={ref}></div>}</Item>\n",_this}return __extends(NoRefError,_super),NoRefError}(Error);exports.NoRefError=NoRefError},608:function(module,exports,__webpack_require__){"use strict";var __assign=this&&this.__assign||function(){return(__assign=Object.assign||function(t){for(var s,i=1,n=arguments.length;i<n;i++)for(var p in s=arguments[i])Object.prototype.hasOwnProperty.call(s,p)&&(t[p]=s[p]);return t}).apply(this,arguments)},__rest=this&&this.__rest||function(s,e){var t={};for(var p in s)Object.prototype.hasOwnProperty.call(s,p)&&e.indexOf(p)<0&&(t[p]=s[p]);if(null!=s&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(p=Object.getOwnPropertySymbols(s);i<p.length;i++)e.indexOf(p[i])<0&&Object.prototype.propertyIsEnumerable.call(s,p[i])&&(t[p[i]]=s[p[i]])}return t},__importDefault=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{default:mod}};Object.defineProperty(exports,"__esModule",{value:!0});var react_1=__importDefault(__webpack_require__(30)),prop_types_1=__importDefault(__webpack_require__(116));exports.layoutPropTypes={closeButtonCaption:prop_types_1.default.string,shareButtonCaption:prop_types_1.default.string,toggleFullscreenButtonCaption:prop_types_1.default.string,zoomButtonCaption:prop_types_1.default.string,prevButtonCaption:prop_types_1.default.string,nextButtonCaption:prop_types_1.default.string,shareButton:prop_types_1.default.bool,fullscreenButton:prop_types_1.default.bool,zoomButton:prop_types_1.default.bool},exports.layoutDefaultProps={closeButtonCaption:"Close (Esc)",shareButtonCaption:"Share",toggleFullscreenButtonCaption:"Toggle fullscreen",zoomButtonCaption:"Zoom in/out",prevButtonCaption:"Previous (arrow left)",nextButtonCaption:"Next (arrow right)",shareButton:!0,fullscreenButton:!0,zoomButton:!0},exports.DefaultLayout=react_1.default.forwardRef((function(_a,ref){var closeButtonCaption=_a.closeButtonCaption,shareButtonCaption=_a.shareButtonCaption,toggleFullscreenButtonCaption=_a.toggleFullscreenButtonCaption,zoomButtonCaption=_a.zoomButtonCaption,prevButtonCaption=_a.prevButtonCaption,nextButtonCaption=_a.nextButtonCaption,shareButton=_a.shareButton,fullscreenButton=_a.fullscreenButton,zoomButton=_a.zoomButton,rest=__rest(_a,["closeButtonCaption","shareButtonCaption","toggleFullscreenButtonCaption","zoomButtonCaption","prevButtonCaption","nextButtonCaption","shareButton","fullscreenButton","zoomButton"]);return react_1.default.createElement("div",__assign({className:"pswp",tabIndex:-1,role:"dialog","aria-hidden":"true"},rest,{ref:ref}),react_1.default.createElement("div",{className:"pswp__bg"}),react_1.default.createElement("div",{className:"pswp__scroll-wrap"},react_1.default.createElement("div",{className:"pswp__container"},react_1.default.createElement("div",{className:"pswp__item"}),react_1.default.createElement("div",{className:"pswp__item"}),react_1.default.createElement("div",{className:"pswp__item"})),react_1.default.createElement("div",{className:"pswp__ui pswp__ui--hidden"},react_1.default.createElement("div",{className:"pswp__top-bar"},react_1.default.createElement("div",{className:"pswp__counter"}),react_1.default.createElement("button",{type:"button",className:"pswp__button pswp__button--close",title:closeButtonCaption}),shareButton&&react_1.default.createElement("button",{type:"button",className:"pswp__button pswp__button--share",title:shareButtonCaption}),fullscreenButton&&react_1.default.createElement("button",{type:"button",className:"pswp__button pswp__button--fs",title:toggleFullscreenButtonCaption}),zoomButton&&react_1.default.createElement("button",{type:"button",className:"pswp__button pswp__button--zoom",title:zoomButtonCaption}),react_1.default.createElement("div",{className:"pswp__preloader"},react_1.default.createElement("div",{className:"pswp__preloader__icn"},react_1.default.createElement("div",{className:"pswp__preloader__cut"},react_1.default.createElement("div",{className:"pswp__preloader__donut"}))))),react_1.default.createElement("div",{className:"pswp__share-modal pswp__share-modal--hidden pswp__single-tap"},react_1.default.createElement("div",{className:"pswp__share-tooltip"})),react_1.default.createElement("button",{type:"button",className:"pswp__button pswp__button--arrow--left",title:prevButtonCaption}),react_1.default.createElement("button",{type:"button",className:"pswp__button pswp__button--arrow--right",title:nextButtonCaption}),react_1.default.createElement("div",{className:"pswp__caption"},react_1.default.createElement("div",{className:"pswp__caption__center"})))))})),exports.DefaultLayout.propTypes=exports.layoutPropTypes,exports.DefaultLayout.defaultProps=exports.layoutDefaultProps},611:function(module,exports,__webpack_require__){"use strict";var __assign=this&&this.__assign||function(){return(__assign=Object.assign||function(t){for(var s,i=1,n=arguments.length;i<n;i++)for(var p in s=arguments[i])Object.prototype.hasOwnProperty.call(s,p)&&(t[p]=s[p]);return t}).apply(this,arguments)},__rest=this&&this.__rest||function(s,e){var t={};for(var p in s)Object.prototype.hasOwnProperty.call(s,p)&&e.indexOf(p)<0&&(t[p]=s[p]);if(null!=s&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(p=Object.getOwnPropertySymbols(s);i<p.length;i++)e.indexOf(p[i])<0&&Object.prototype.propertyIsEnumerable.call(s,p[i])&&(t[p[i]]=s[p[i]])}return t},__read=this&&this.__read||function(o,n){var m="function"==typeof Symbol&&o[Symbol.iterator];if(!m)return o;var r,e,i=m.call(o),ar=[];try{for(;(void 0===n||n-- >0)&&!(r=i.next()).done;)ar.push(r.value)}catch(error){e={error:error}}finally{try{r&&!r.done&&(m=i.return)&&m.call(i)}finally{if(e)throw e.error}}return ar},__importDefault=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{default:mod}},__importStar=this&&this.__importStar||function(mod){if(mod&&mod.__esModule)return mod;var result={};if(null!=mod)for(var k in mod)Object.hasOwnProperty.call(mod,k)&&(result[k]=mod[k]);return result.default=mod,result};Object.defineProperty(exports,"__esModule",{value:!0});var photoswipe_1=__importDefault(__webpack_require__(612)),react_1=__importStar(__webpack_require__(30)),prop_types_1=__importDefault(__webpack_require__(116)),helpers_1=__webpack_require__(274),context_1=__webpack_require__(276),gallery_base_1=__webpack_require__(277);exports.CustomGallery=function(_a){var children=_a.children,layoutRef=_a.layoutRef,ui=_a.ui,options=_a.options,galleryUID=_a.id,onOpen=_a.onOpen,items=react_1.useRef(new Map),open=react_1.useCallback((function(targetRef,targetId){var index=null,normalized=[],entries=Array.from(items.current),prepare=function(entry,i){var _a=__read(entry,2),ref=_a[0],_b=_a[1],width=_b.width,height=_b.height,title=_b.title,original=_b.original,thumbnail=_b.thumbnail,pid=_b.id,rest=__rest(_b,["width","height","title","original","thumbnail","id"]);(targetRef===ref||void 0!==pid&&String(pid)===targetId)&&(index=i),normalized.push(__assign(__assign(__assign(__assign({},title?{title:title}:{}),{w:Number(width),h:Number(height),src:original,msrc:thumbnail,el:ref.current}),void 0!==pid?{pid:pid}:{}),rest))};items.current.size>1?entries.sort((function(_a,_b){var a=__read(_a,1)[0].current,b=__read(_b,1)[0].current;return helpers_1.sortNodes(a,b)})).forEach(prepare):entries.forEach(prepare);var layoutEl=layoutRef.current;if(layoutEl){var instance=new photoswipe_1.default(layoutEl,ui,normalized,__assign(__assign({index:null===index?parseInt(targetId,10)-1:index,getThumbBoundsFn:function(thumbIndex){var el=normalized[thumbIndex].el;return el?helpers_1.getElBounds(el):{x:0,y:0,w:0}},history:!1},void 0!==galleryUID?{galleryUID:galleryUID,history:!0}:{}),options||{}));instance.init(),void 0!==onOpen&&"function"==typeof onOpen&&onOpen(instance)}}),[]);react_1.useEffect((function(){if(void 0!==galleryUID){var hash=window.location.hash.substring(1),params={};if(!(hash.length<5)){for(var vars=hash.split("&"),i=0;i<vars.length;i++)if(vars[i]){var _a=__read(vars[i].split("="),2),key=_a[0],value=_a[1];key&&value&&(params[key]=value)}var pid=params.pid,gid=params.gid;pid&&gid===String(galleryUID)&&open(null,pid)}}}),[]);var remove=react_1.useCallback((function(ref){items.current.delete(ref)}),[]),set=react_1.useCallback((function(ref,data){items.current.set(ref,data)}),[]);return react_1.default.createElement(context_1.Context.Provider,{value:{remove:remove,set:set,handleClick:open}},children)},exports.CustomGallery.propTypes=__assign(__assign({},gallery_base_1.baseGalleryPropTypes),{layoutRef:prop_types_1.default.shape({current:prop_types_1.default.instanceOf("undefined"==typeof Element?function Element(){}:Element)}).isRequired,ui:prop_types_1.default.any.isRequired})},613:function(module,exports,__webpack_require__){"use strict";var __assign=this&&this.__assign||function(){return(__assign=Object.assign||function(t){for(var s,i=1,n=arguments.length;i<n;i++)for(var p in s=arguments[i])Object.prototype.hasOwnProperty.call(s,p)&&(t[p]=s[p]);return t}).apply(this,arguments)},__rest=this&&this.__rest||function(s,e){var t={};for(var p in s)Object.prototype.hasOwnProperty.call(s,p)&&e.indexOf(p)<0&&(t[p]=s[p]);if(null!=s&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(p=Object.getOwnPropertySymbols(s);i<p.length;i++)e.indexOf(p[i])<0&&Object.prototype.propertyIsEnumerable.call(s,p[i])&&(t[p[i]]=s[p[i]])}return t},__importDefault=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{default:mod}},__importStar=this&&this.__importStar||function(mod){if(mod&&mod.__esModule)return mod;var result={};if(null!=mod)for(var k in mod)Object.hasOwnProperty.call(mod,k)&&(result[k]=mod[k]);return result.default=mod,result};Object.defineProperty(exports,"__esModule",{value:!0});var photoswipe_ui_default_1=__importDefault(__webpack_require__(272)),react_1=__importStar(__webpack_require__(30)),_1=__webpack_require__(275),gallery_base_1=__webpack_require__(277);exports.Gallery=function(_a){var children=_a.children,options=_a.options,id=_a.id,onOpen=_a.onOpen,restProps=__rest(_a,["children","options","id","onOpen"]),defaultLayoutRef=react_1.useRef();return react_1.default.createElement(_1.CustomGallery,{layoutRef:defaultLayoutRef,ui:photoswipe_ui_default_1.default,options:options,id:id,onOpen:onOpen},children,react_1.default.createElement(_1.DefaultLayout,__assign({},restProps,{ref:defaultLayoutRef})))},exports.Gallery.propTypes=__assign(__assign({},gallery_base_1.baseGalleryPropTypes),_1.layoutPropTypes)},614:function(module,exports,__webpack_require__){"use strict";var __rest=this&&this.__rest||function(s,e){var t={};for(var p in s)Object.prototype.hasOwnProperty.call(s,p)&&e.indexOf(p)<0&&(t[p]=s[p]);if(null!=s&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(p=Object.getOwnPropertySymbols(s);i<p.length;i++)e.indexOf(p[i])<0&&Object.prototype.propertyIsEnumerable.call(s,p[i])&&(t[p[i]]=s[p[i]])}return t},__importDefault=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{default:mod}};Object.defineProperty(exports,"__esModule",{value:!0});var react_1=__webpack_require__(30),prop_types_1=__importDefault(__webpack_require__(116)),context_1=__webpack_require__(276);exports.Item=function(_a){var children=_a.children,restProps=__rest(_a,["children"]),ref=react_1.useRef(),_b=react_1.useContext(context_1.Context),remove=_b.remove,set=_b.set,handleClick=_b.handleClick,open=react_1.useCallback((function(){return handleClick(ref)}),[]);return react_1.useEffect((function(){return set(ref,restProps),function(){return remove(ref)}}),Object.values(restProps)),children({ref:ref,open:open})},exports.Item.propTypes={original:prop_types_1.default.string,thumbnail:prop_types_1.default.string,width:prop_types_1.default.oneOfType([prop_types_1.default.number,prop_types_1.default.string]),height:prop_types_1.default.oneOfType([prop_types_1.default.number,prop_types_1.default.string]),title:prop_types_1.default.string,html:prop_types_1.default.string,children:prop_types_1.default.func.isRequired,id:prop_types_1.default.oneOfType([prop_types_1.default.number,prop_types_1.default.string])}}},[[280,1,2]]]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,